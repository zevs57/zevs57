# Вам дана область карты task_8_8_2_mapcity.osm

# Пройдите по всем way в этой области, выделите среди них замкнутые (те, у которых совпадает ссылка на первый и 
# последний node), среди всех замкнутых выделите те, у которых установлен tag с ключом building и произвольным 
# значением.

# Запомните id для way и список кортежей, содержащих координаты (широту и долготу) всех node, входящих в этот way. 

# Вам предложена функция, которая определяет нечто похожее на площадь замкнутой ломаной.

# import math

# def getsqr(coordlist):
# baselat = coordlist[0][0]
# baselon = coordlist[0][1]
# degreelen = 111300
# newcoord = []
# for now in coordlist:
#      newcoord.append(((now[0] - baselat) * degreelen, (now[1] - baselon) * degreelen * math.sin(baselat)))
# sqr = 0
# for i in range(len(newcoord) - 1):
#      sqr += newcoord[i][0] * newcoord[i + 1][1] - newcoord[i + 1][0] * newcoord[i][1]
#      sqr += newcoord[-1][0] * newcoord[0][1] - newcoord[0][0] * newcoord[-1][1]
#      return abs(sqr)
# Она принимает на вход список с координатами точек так, как вы выводили его в предыдущей задаче 
# (обратите внимание, что числа внутри кортежей должны иметь тип float).
# 
# С помощью этой функции найдите id для самого большого площади здания.


import math
from bs4 import BeautifulSoup

xml = open('task_8_8_2_mapcity.osm', "r", encoding="utf8").read()  # скачиваем файл
soup = BeautifulSoup(xml, 'lxml')  # делаем суп с помощью lxml


def getsqr(coordlist):
    baselat = coordlist[0][0]
    baselon = coordlist[0][1]
    degreelen = 111300
    newcoord = []
    for now in coordlist:
        newcoord.append(((now[0] - baselat) * degreelen, (now[1] - baselon) * degreelen * math.sin(baselat)))
    sqr = 0
    for i in range(len(newcoord) - 1):
        sqr += newcoord[i][0] * newcoord[i + 1][1] - newcoord[i + 1][0] * newcoord[i][1]
    sqr += newcoord[-1][0] * newcoord[0][1] - newcoord[0][0] * newcoord[-1][1]
    return abs(sqr)


d_node_koordinat = {}
for node in soup.find_all("node"):  # идем по всем тэгам node
    d_node_koordinat[node["id"]] = float(node["lat"]), float(node["lon"])  # заносим в словарь координаты всех node

list_sqr_building = []
for way in soup.find_all("way"):  # идем по всем тэгам way
    list = []
    for nd in way("nd"):
        list.append(nd)
    if list[0] == list[len(list) - 1]:  # проверяем равен ли первый и последний тег nd в way
        for tag in way(k="building"):  # выбираем только такие id way в которых установлен tag с ключом building
            # и произвольным значением
            way["id"]  # id здания
            list_node_koodinat = []
            for nd in way("nd"):
                list_node_koodinat.append(d_node_koordinat[nd["ref"]])  # составляем список с координатами,
                # используя словарь d_node_koordinat, подставля
                # значения [nd["ref"]
            sqr = getsqr(list_node_koodinat)  # вычисление площади здания по координатам

            list_sqr_building.append((sqr, way["id"]))  # заполнение списка с парами значений (sqr, way["id"])
sort = sorted(list_sqr_building, key=lambda x: (-x[0]))  # сортировка списка по убыванию
print(sort[0][1])  # вывод id с самой большой площадью.
